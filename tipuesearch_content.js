var tipuesearch = {"pages":[{"title":"About","text":"Dr.Gowrishankar S. is currently working as Associate Professor in the Department of Computer Science and Engineering at Dr.Ambedkar Institute of Technology, Bengaluru, India. He earned his PhD in Engineering from Jadavpur University, Kolkata, India in 2010 and MTech in Software Engineering and BE in Computer Science and Engineering from Visvesvaraya Technological University ( VTU ), Belagavi, India, in the years 2005 and 2003 respectively. From 2011 to 2014 he worked as Senior Research Scientist and Tech Lead at Honeywell Technology Solutions, Bengaluru, India. He has been awarded with the Technical and Innovation Award and Individual Excellence Award for his contribution towards successful delivery of projects at Honeywell Technology Solutions. He has published several papers in various reputed International Journals and Conferences. He is serving as editor and reviewer for various prestigious International Journals. He is also member of IEEE , ACM , CSI and ISTE . He has delivered many keynote addresses and invited talks throughout India on a variety of subjects related to Computer Science and Engineering. He was instrumental in organizing several conferences, workshops and seminars. He has also served on the panel of number of Academic Bodies of Universities and Autonomous Colleges as a BOS and BOE member. His current research interests are mainly focused on Data Science, including its technical aspects as well as its applications and implications. Specifically, he is interested in the applications of Machine Learning, Data Mining and Big Data analytics in Healthcare.His Twitter handle is @g_s_nath.","tags":"pages","url":"/about.html","loc":"/about.html"},{"title":"Contact","text":"Feel free to get in touch via the form below, or just send an email to gowrishankarnath@acm.org Your name Your email Your message","tags":"pages","url":"/contact.html","loc":"/contact.html"},{"title":"Disclaimer","text":"I want to emphasize that this is my personal blog, and the opinions expressed here are mine, and not that of my current or former employer's or anyone else in any way. I speak only for myself, not for them.","tags":"pages","url":"/disclaimer.html","loc":"/disclaimer.html"},{"title":"Introduction to Python Programming","text":"Introduction to Python Programming . The Git repository for the book containing the code examples from the book \"Introduction to Python Programming\" , authored by Gowrishankar S. and Veena A. and published by CRC Press can be found here . Book Purchase You can purchase the book at following sources ​ Book Details Hardcover: 464 pages Publisher: Chapman and Hall/ CRC Press; 1 edition (November 7, 2018) Language: English ISBN -10: 0815394373 ISBN -13: 978-0815394372 Software Requirements All the code in the book works with Python 3.6 version or above. Since f -strings are used throughout the book which was introduced in Python 3.6 version, you need to have Python interpreter 3.6 or above for the code to work as it is. Install the latest version of 64-bit Anaconda Distribution with support for Python 3.6 or above. If you want to make the code work with Python 3.1 to 3.5 versions, use str.format() statements within the print() function instead of f-strings. The rest of the statements within the code remains the same and the code should work fine. It is highly recommended that you use the latest version of PyCharm Community Edition to execute the programs. You will gain valuable insights in to Python programming language by using this IDE , no matter whether you are a beginner or an experienced professional. Book Source Code You need to download the folder Book_Code and open it in PyCharm IDE . Each of the code files are numbered and they appear under a Chapter number. The numbering of the code files corresponds to the order in which they appear in the book. Each of the code file is a self-contained file. To run a code file, right-click on the file name in the PyCharm IDE and select the \"Run\" from the context menu. Who Should Read This Book? This book is for beginners to Python programming who are interested in learning the basics of Python programming language. Citing this Book You are very welcome to re-use the code snippets for academic purpose; in this case, we would appreciate citations to the original source: BibTeX: @Book{gsva2018python, author = {Gowrishankar S., Veena A.}, title = {Introduction to Python Programming}, publisher = {Chapman and Hall/ CRC Press}, year = {2018}, address = {Boca Raton, USA }, isbn = {0815394373} } MLA : S, Gowrishankar, and Veena A. Introduction to Python Programming. Chapman & Hall/ CRC Press, 2018. Contributing to the book Please don't make pull requests here. I don't accept pull requests on this repository. If you notice an issue, please file an issue instead. Errata We hope to improve this book continually. If you have any suggestions for improving this text or if an error should be found, the authors would be grateful if notification were sent by e-mail to gowrishankarnath@acm.org. To ensure your messages do not end up in our junk mail folder, please include subject as \"Introduction to Python Programming.\" You can see a list of known issues that have been found in each chapter by looking at Errata and the corresponding corrections. If you found a mistake and don't see it listed there, please create a new issue . Thank you for your help! Contact If you are interested in keeping in touch, I am active on twitter and my id is @g_s_nath . Table of Contents 1. Introduction 1.1 What Is a Program? 1.2 Programming Languages 1.3 Software Development 1.4 History of Python Programming Language 1.5 Thrust Areas of Python 1.6 Installing Anaconda Python Distribution 1.7 Installing PyCharm IDE to Set Up a Python Development Environment 1.8 Creating and Running Your First Python Project 1.9 Installing and Using Jupyter Notebook 1.10 Open Source Software 1.11 Summary Multiple Choice Questions Review Questions 2. Parts of Python Programming Language 2.1 Identifiers 2.2 Keywords 2.3 Statements and Expressions 2.4 Variables 2.5 Operators 2.6 Precedence and Associativity 2.7 Data Types 2.8 Indentation 2.9 Comments 2.10 Reading Input 2.11 Print Output 2.12 Type Conversions 2.13 The type() Function and Is Operator 2.14 Dynamic and Strongly Typed Language 2.15 Summary Multiple Choice Questions Review Questions 3. Control Flow Statements 3.1 The if Decision Control Flow Statement 3.2 The if…else Decision Control Flow Statement 3.3 The if…elif…else Decision Control Statement 3.4 Nested if Statement 3.5 The while Loop 3.6 The for Loop 3.7 The continue and break Statements 3.8 Catching Exceptions Using try and except Statement 3.9 Summary Multiple Choice Questions Review Questions 4. Functions 4.1 Built-In Functions 4.2 Commonly Used Modules 4.3 Function Definition and Calling the Function 4.4 The return Statement and void Function 4.5 Scope and Lifetime of Variables 4.6 Default Parameters 4.7 Keyword Arguments 4.8 *args and **kwargs 4.9 Command Line Arguments 4.10 Summary Multiple Choice Questions Review Questions 5. Strings 5.1 Creating and Storing Strings 5.2 Basic String Operations 5.3 Accessing Characters in String by Index Number 5.4 String Slicing and Joining 5.5 String Methods 5.6 Formatting Strings 5.7 Summary Multiple Choice Questions Review Questions 6. Lists 6.1 Creating Lists 6.2 Basic List Operations 6.3 Indexing and Slicing in Lists 6.4 Built-In Functions Used on Lists 6.5 List Methods 6.6 The del Statement 6.7 Summary Multiple-Choice Questions Review Questions 7. Dictionaries 7.1 Creating Dictionary 7.2 Accessing and Modifying key:value Pairs in Dictionaries 7.3 Built-In Functions Used on Dictionaries 7.4 Dictionary Methods 7.5 The del Statement 7.6 Summary Multiple Choice Questions Review Questions 8. Tuples and Sets 8.1 Creating Tuples 8.2 Basic Tuple Operations 8.3 Indexing and Slicing in Tuples 8.4 Built-In Functions Used on Tuples 8.5 Relation between Tuples and Lists 8.6 Relation between Tuples and Dictionaries 8.7 Tuple Methods 8.8 Using zip() Function 8.9 Sets 8.10 Set Methods 8.10.1 Traversing of Sets 8.11 Frozenset 8.12 Summary Multiple Choice Review Questions 9. Files 9.1 Types of Files 9.2 Creating and Reading Text Data 9.3 File Methods to Read and Write Data 9.4 Reading and Writing Binary Files 9.5 The Pickle Module 9.6 Reading and Writing CSV Files 9.7 Python os and os.path Modules 9.8 Summary Multiple Choice Questions Review Questions 10. Regular Expression Operations 10.1 Using Special Characters 10.2 Regular Expression Methods 10.3 Named Groups in Python Regular Expressions 10.4 Regular Expression with glob Module 10.5 Summary Multiple Choice Questions Review Questions 11. Object-Oriented Programming 11.1 Classes and Objects 11.2 Creating Classes in Python 11.3 Creating Objects in Python 11.4 The Constructor Method 11.5 Classes with Multiple Objects 11.6 Class Attributes versus Data Attributes 11.7 Encapsulation 11.8 Inheritance 11.9 The Polymorphism 11.10 Summary Multiple Choice Questions Review Questions 12. Introduction to Data Science 12.1 Functional Programming 12.2 JSON and XML in Python 12.3 NumPy with Python 12.4 Pandas 12.5 Altair 12.6 Summary Multiple Choice Questions Review Questions","tags":"Book","url":"/introduction-to-python-programming.html","loc":"/introduction-to-python-programming.html"},{"title":"Python Application Programming Course Material VTU , Belagavi","text":"I have uploaded the course material for \"Python Application Programming\", as prescribed by Visvesvaraya Technological University, Belagavi popularly known as VTU . You will find slide deck (ppts) for all the units with programming examples here. Also, few model question papers are provided for reference.","tags":"Articles","url":"/python-application-programming-course-material-vtu-belagavi.html","loc":"/python-application-programming-course-material-vtu-belagavi.html"},{"title":"Remote Programming of Raspberry Pi using PyCharm","text":"This tutorial is about using PyCharm IDE on a Windows machine to remotely execute Python 2.7 programs on Raspberry Pi. Despite my best efforts, I could not find a step by step tutorial on how to remotely connect PyCharm to Raspberry Pi and use the Raspberry Pi python interpreter to execute the programs. So I'm listing out the steps here. This tutorial is tested on a Windows 10 machine and Raspberry Pi running Raspbian OS . Step 1: Ensure the Windows Machine and Raspberry Pi are part of the same Network. Step 2: Install PyCharm Professional Edition on your Windows machine. Step 3: You need to get the IP Address of Raspberry Pi. To do so, open the Terminal window on raspberry pi and type the following command ifconfig As can be seen from the screenshot, Raspberry Pi is connected to the Wireless LAN and the address is 172.16.2.100. It may vary on your Raspberry Pi. Make a note of this address. Step 4: Once you have obtained the Address, go to your home directory and create a folder as shown in the below screenshot. This folder is used to store the Python programs. Step 5: Invoke your PyCharm IDE . Create a new Project. Go to File —> New Project —> Pure Python —> Give a Project Name. In my case it is RaspberryPiProject. Step 6: Right Click on RaspberryPiProject and select New —> Python File and give a name to python file. In my case it is rasp.py Step 7: Write the line print \"Hello RaspberryPi\" in the editor. Step 8: Now go to File —> Settings On the left pane of the window you should see Project:RaspberryPiProject. (If you have given a different name then it may differ from what is displayed here) Expand it and Click on Project Interpreter On the right pane of the window, click at the end of Project Interpreter and select Add Remote option as shown below. A Remote Python Interpreter window pops up. Step 9: Configure the Remote Python Interpreter window. Write the IP address of the Raspberry Pi you earlier made note of in the Host option. Give the user name and password. Specify the Python interpreter path on raspberry pi. Click OK . Now you should see the Python Interpreter found in Raspberry Pi. Step 10: Now go to Tools —> Deployment —> Configuration and click on + sign on the left pane. You should see a window. At this stage Raspberry Pi will be treated as a Server machine. Give a name to your Raspberry Pi server (in my case it is GS_Research) and select the type as SFTP and click OK Step 11: Click on the Connections tab and specify the IP address of the Raspberry Pi again in SFTP host Leave the port and Root path as it is. Specify the User Name and Password Then click on Mappings tab. Specify the local path where you have stored the python project in the Windows machine. Then specify the path which we had created to store the Python programs on raspberry pi i.e., /home/pi/pywork and click OK . Step 12: Now we need to upload the Python file created on a Windows machine on to Raspberry Pi and compile the program using Raspberry Pi Python Interpreter. Go to Tools —> Deployment —> Upload to GS_Research. Remember, here GS_Research is the name given to the Raspberry Pi server. At the bottom pane, you can see that the file is successfully uploaded. Now open the terminal window again on the Raspberry Pi and go to the path where you intended to store Python programs. If you have followed the instructions then the path is /home/pi/pywork. You should see the rasp.py file in there. Step 13: You need to sync the Python code with Raspberry Pi as and when you write your code in PyCharm. To do that go to Tools —> Deployment —> Sync with Deployed to GS_Research. Happy Coding…","tags":"Articles","url":"/remote-programming-of-raspberry-pi-using-pycharm.html","loc":"/remote-programming-of-raspberry-pi-using-pycharm.html"},{"title":"Nomenclature for Naming Published Research Papers","text":"Recently, I was asked to collect the research papers published by all the faculty member in our department. This made me to think, what might be the best way to collect and sort these papers? I thought of coming up with a naming convention for these papers based on requirements as mentioned below. On any given day, I should be able to pick the exact paper belonging to a particular faculty. Keep track of number of papers published by each faculty. Whether the paper is published in Journal or Conference. Ability to sort the papers year wise. Based on the above requirements I devised the following way to name each file. Paper name is divided into six components. Each of these components is separated by a Hyphen. First component is the type of paper. If the paper is published in International Journal then use the Keyword IJ , likewise for International Conference use IC , for National Journal use NJ and for National Conference use NC Second component is the name of the concerned faculty. Use the first three letters of the faculty name. For e.g., if the faculty name is Patrick.G.S then the second component will be PAT . Third component is the initials of the concerned faculty. So w.r.t. the above name the third component will be GS (exclude dots). Fourth component is the month in which the paper was published. For e.g., if the paper is published in the month of March then use the numeral 03. (prefix 0 for single digits) Fifth component is the year in which the paper was published. For e.g., if the paper is published in the year 2016 then it'll be the fifth component. Sixth component is the count of the number of papers the faculty has published under a particular category of IJ or IC or NJ or NC . Based on the requirements discussed, if for e.g., Prof. Patrick.G.S has published in 2 International Journals and in 2 International Conferences then the nomenclature for these papers will be as shown below: For International Journal IJ - PAT - GS -03-2016-1 IJ - PAT - GS -05-2016-2 For International Conference IC - PAT - GS -10-2016-1 IC - PAT - GS -11-2016-2","tags":"Articles","url":"/nomenclature-for-naming-published-research-papers.html","loc":"/nomenclature-for-naming-published-research-papers.html"},{"title":"Traverse and Rename files in folder","text":"I recently encountered a problem wherein I had to traverse through all the files in a folder and rename each file. The original files is as shown below having a set of characters and the number separated by an \"-\" (hyphen) with jpg extension. d6445cef9361a2bf-1.jpg d6445cef9361a2bf-2.jpg d6445cef9361a2bf-3.jpg and so on. Here, the requirement was to remove the left part of the \"-\" (hyphen) and retain only the number and the extension. So, here is my approach. from glob import glob import os pathFromUser = input ( \"Enter the Path\" ) files_list = glob ( os . path . join ( pathFromUser , '*.jpg' )) for each_file in files_list : number = os . path . basename ( each_file ) . split ( \"-\" )[ 1 ] . split ( \".\" )[ 0 ] os . rename ( each_file , number + \".jpg\" ) In line 4, we ask the user to enter the path for the folder which contains all the files. In line 5, a list of all the files in the folder is assigned to the list called files_list . One should be aware that it's not only the filename but a combination of both path and filename i.e., C:\\foldername\\d6445cef9361a2bf-1.jpg. In line 6, we loop through each file in the list. In line 7, the basename() method is used to obtain the name of the file from the path and then we split the filename based on \"-\" (hyphen) and we again split the resultant value based on \".\" (dot). This line results in a number present in the file and is assigned to the variable number. Then we use the method rename() to rename each file to the value that is present in the number.","tags":"Articles","url":"/traverse-and-rename-files-in-folder.html","loc":"/traverse-and-rename-files-in-folder.html"},{"title":"MySQL Programming with Python using MySQL Python Connector","text":"Introduction This article is about programming MySQL with Python using MySQL Python Connector. MySQL is a popular Open Source Database that finds its way in the software stack of almost all newer billion dollar companies. Let's try to do some basic operations like Insert , Read , Update and Delete . For creating the database schema we have used MySQL workbench, even though it is fully possible to do the same programmatically using Python and the MySQL Python Connector. For our article I have considered this below database schema. You can read more about designing this schema here The illustrated code has been tested on Python 3.5 with MySQL Python Connector. MySQL Programming With Python Using MySQL Python Connector Install the latest version of MySQL Python Connector as shown below In line 1, we import mysql.connector module. In line 2 we also import the errorcode class which can be used to various errors related to Database query. In line 3-4 we import faker module and create fake object. The reason for using this awesome module is I wanted to have some real world values generated for me instead of writing the values manually. You can read more about faker module here You need to declare and provide values for user , password , host , database and raise_on_warnings . Here, config is declared as a dictionary. You need to pass this config dictionary to connect method as an argument (see ** in the connect method). In line 21 we create cursor object which can be used to execute the Database query. We write a query to insert a row to the contactperson table. The query is stored in the variable addContactPerson which is passed to the execute method as an argument. In this program we will use an for loop to insert ten rows. Once we have performed our operation we need to close the cnx and cursor objects. import mysql.connector from mysql.connector import errorcode from faker import Factory fake = Factory . create () config = { 'user' : 'root' , 'password' : 'mysql123' , 'host' : 'localhost' , 'database' : 'contactmanagerapplication' , 'raise_on_warnings' : True , } #This is the most efficient way of toggling between the values import itertools toggle = itertools . cycle ([ 'Male' , 'Female' ]) #next(toggle) try : cnx = mysql . connector . connect ( ** config ) cursor = cnx . cursor () #Let's insert ten rows to contactperson table for person in range ( 1 , 11 ): contactPersonID = person firstName = fake . first_name_male () #generate fake first name lastName = fake . last_name_male () #generate fake middle name middleName = fake . last_name_male () #generate fake last name dateOfBirth = fake . date () #generate fake DOB contactPersonType = next ( toggle ) #In SQL statement the values need to be enclosed within double quotes #I'm providing the same by explicity specifying double quotes and removing it's special meaning addContactPerson = \"INSERT INTO contactmanagerapplication.contactperson(\" \\ \"ContactPersonID, FirstName, MiddleName, LastName, DateOfBirth,\" \\ \"ContactPersonType)VALUES({}, \\\" {} \\\" , \\\" {} \\\" , \\\" {} \\\" , \\\" {} \\\" , \\\" {} \\\" )\" . \\ format ( contactPersonID , firstName , lastName , middleName , dateOfBirth , contactPersonType ) cursor . execute ( addContactPerson ) cnx . commit () except mysql . connector . Error as err : if err . errno == errorcode . ER_ACCESS_DENIED_ERROR : print ( \"Something is wrong with your user name or password\" ) elif err . errno == errorcode . ER_BAD_DB_ERROR : print ( \"Database does not exist\" ) else : print ( err ) else : cursor . close () cnx . close () In the below code we select and display all the rows from the contactperson table. Once we have composed and executed the select query, we have to use the cursor object along with for loop to display all the rows. In line 19, we specify variable names that correspond to the attributes in the table contactperson . We then use these variable names to display the values. import mysql.connector from mysql.connector import errorcode config = { 'user' : 'root' , 'password' : 'mysql123' , 'host' : 'localhost' , 'database' : 'contactmanagerapplication' , 'raise_on_warnings' : True , } try : cnx = mysql . connector . connect ( ** config ) cursor = cnx . cursor () #Let's read all the rows in the table readContactPerson = \"select * from contactmanagerapplication.contactperson\" cursor . execute ( readContactPerson ) #specify the attributes that you want to display for ( contactPersonID , firstName , lastName , middleName , dateOfBirth , contactPersonType ) in cursor : print ( \"{}, {}, {}, {}, {}, {}\" . format ( contactPersonID , firstName , middleName , lastName , dateOfBirth , contactPersonID )) cnx . commit () except mysql . connector . Error as err : if err . errno == errorcode . ER_ACCESS_DENIED_ERROR : print ( \"Something is wrong with your user name or password\" ) elif err . errno == errorcode . ER_BAD_DB_ERROR : print ( \"Database does not exist\" ) else : print ( err ) else : cursor . close () cnx . close () </ pre > Below code asks the user to enter the contactPersonID number which needs to be deleted. Based on the value that the user has entered the related row gets deleted in the table. import mysql.connector from mysql.connector import errorcode config = { 'user' : 'root' , 'password' : 'mysql123' , 'host' : 'localhost' , 'database' : 'contactmanagerapplication' , 'raise_on_warnings' : True , } try : cnx = mysql . connector . connect ( ** config ) cursor = cnx . cursor () contactPersonID = input ( \"Enter the ContactPersonID to be deleted\" ) #Let's remove a row in contactperson table by specifying the contactPersonID deleteContactPerson = \"DELETE FROM contactmanagerapplication.contactperson where ContactPersonID = {}\" . format ( contactPersonID ) cursor . execute ( deleteContactPerson ) cnx . commit () except mysql . connector . Error as err : if err . errno == errorcode . ER_ACCESS_DENIED_ERROR : print ( \"Something is wrong with your user name or password\" ) elif err . errno == errorcode . ER_BAD_DB_ERROR : print ( \"Database does not exist\" ) else : print ( err ) else : cursor . close () cnx . close () Below code is used to update an attribute of a particular row based on user input. import mysql.connector from mysql.connector import errorcode from faker import Factory fake = Factory . create () config = { 'user' : 'root' , 'password' : 'mysql123' , 'host' : 'localhost' , 'database' : 'contactmanagerapplication' , 'raise_on_warnings' : True , } try : cnx = mysql . connector . connect ( ** config ) cursor = cnx . cursor () contactPersonID = input ( 'Enter the Contact Person ID whose records needs to be updated' ) firstName = fake . first_name_male () #generate fake first name #Let's update a row in contactperson table by specifying the contactPersonID updateContactPerson = \"UPDATE contactmanagerapplication.contactperson SET FirstName = \\\" {} \\\" WHERE ContactPersonID = {}\" . format ( firstName , contactPersonID ) cursor . execute ( updateContactPerson ) cnx . commit () except mysql . connector . Error as err : if err . errno == errorcode . ER_ACCESS_DENIED_ERROR : print ( \"Something is wrong with your user name or password\" ) elif err . errno == errorcode . ER_BAD_DB_ERROR : print ( \"Database does not exist\" ) else : print ( err ) else : cursor . close () cnx . close () Conclusion As you can see with few lines of Python code we can perform various database operations. You can find the source code for all the programs discussed @ https://github.com/gowrishankarnath/MySqlProgrammingWithPython","tags":"Articles","url":"/mysql-programming-with-python-using-mysql-python-connector.html","loc":"/mysql-programming-with-python-using-mysql-python-connector.html"},{"title":"Designing Database Schema Using MySQL Workbench","text":"Introduction This article is about designing Database schema using MySQL Workbench. MySQL Workbench helps us to create visual data model which can be translated into a physical database on the MySQL Database Server. For demonstration purpose we'll be designing an Contact Manager Application Database. This DB has four tables namely ContactPerson, Address, EmailAddress and PhoneNumber. I'll not be discussing various DB issues like Normalization, Entity-Relationship( ER )/Enhanced Entity-Relationship( EER ) models or SQL programming. Please refer to the various fine materials available. Below are few recommended textbooks: Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design Beginning Database Design: From Novice to Professional SQL in 10 Minutes, Sams Teach Yourself Learning SQL Head First SQL : Your Brain on SQL — A Learner's Guide Download the latest version of MySQL Database from https://www.mysql.com/downloads/ . Make sure that you have downloaded the community edition of MySQL. Steps Involved In Designing Database Schema I presume that you already have a working copy of MySQL installed in your system. Step 1: Invoke MySQL workbench. That should look like the below screen. The top Window Pane displays MySQL Connections. There can be any number of MySQL instances. Here we have one instance of MySQL connection with root user. The bottom pane shows the Models that you have created. The right window pane shows shortcuts to various MySQL tools. We'll create Visual Data Models and then it'll be converted to the actual physical database schema on the MySQL database server. Remember, creation of Data Models doesn't mean that you have already created actual physical database schema. In the Models window pane click on the + sign. Step 2: You will see a screen as shown below. By default the DB schema is named as mydb. Let's change this. Double click on mydb in the Physical Schemas window pane. In the bottom window pane change the name from mydb to ContactManagerApplication. In the Refactor Schema windows click on OK button. Step 3: Double click on Add Table. Step 4: You will see the below screen. Step 5: Change the table name to ContactPerson. Also, fill the Column Name or attributes with various values with appropriate data types as shown in the below screen. Step 6: Add another table called Address and fill the Column Name with various values with appropriate data types as shown in the below screen. Step 7: Add another table called EmailAddress and fill the Column Name with various values with appropriate data types as shown in the below screen. Step 8: Add another table called PhoneNumber and fill the Column Name with various values with appropriate data types as shown in the below screen. Step 9: Click on Save button in the Menu bar. Save the data model as ContactManagerApplication in some folder. At this stage we have created all the tables for our schema and have saved the model. We have still not converted this model to actual physical database on MySQL database server. Lets' migrate these models to connect to MySQL Database. Step 10: Go to the menu bar and click on Database and select Forward Engineer. In the Forward Engineer to Database window, various parameters have been set. This depends on your configuration while installing MySQL database. I'm using the Local Instance of MySQL and root user. Leave the Default Schema blank. This forward engineering generates all the SQL code to create a physical database on the target server. Click on Next button. Give the Password for the root User and click on OK button. Click on Next button. In the window you can see the SQL script that has been generated by the MySQL workbench. You can review the script and save the script as a file and click on Next button. Again, give the Password for the root User and click on OK . Click on Close button. Step 11: From the previous step(Forward Engineering) we have generated the SQL script for our models. We'll use Reverse Engineering to connect the generated SQL script to the SQL Server database thereby creating the actual physical database on the SQL Server. Go to Database in the menu and click on Reverse Engineer. Again, you see the default parameters that are set and click on Next button. Give the Password for root User and click on OK button. Click on Next button. Now at this stage you can see the available list of various Database schemas. Select the contactmanagerapplication checkbox and click on Next button. Give Password for the root User and click on OK button. Click on Next button. Click on Execute button. Click on Next button. Click on Finish button. Step 12: An EER diagram will be automatically generated by the MySQL workbench. It shows the data model which we have created. Let's establish relation between various tables. Click on the highlighted button (which is an 1 to many relation) in the column bar. First click on the name on whose side the many relationship should come and then click on the name on whose side 1 relationship should come. For e.g., to establish 1 to many relationship between address table and contactperson table, first click on ContactPersonID in the address table and then click on ContactPersonID in the contactperson table. Repeat the above process between other tables to establish a relationship as shown below. Step 13: In the previous step, we have established the relationship between various tables as seen in the EER diagram. But this relationship is not reflected in the actual physical database schema which we have created. To do so, we have to synchronize between the actual physical database schema and the data model. Go to menu and click on Database and select Synchronize Model. When ever there is some changes done to the data model as seen in the EER diagram it won't get reflected automatically in the Database Schema. We have to synchronize the changes done to the data model as displayed in EER diagram with the Database Schema to see the changes. Click on Next button. Click on Next button. Enter the Password for root User. Click on OK button. Click on Next button. Select the checkbox and click on Next button. Click on Next button. The tool compares all aspects of the current data model with the actual physical MySQL Database schema and lists out the difference between the current data model and the actual physical Database schema. Click on Next button. You'll be able to see a sequence of SQL scripts. Click on execute button. Give the Password for root User and click on OK button. Click on close button. Step 14: To see whether the data model has been migrated to the MySQL database, go to menu and click on Database and select Connect to Database. Click on OK button. On the left pane you can see the contactmanagerapplication database schema and expand it see the list of tables. Conclusion I have shown the various steps involved in creating an Database Schema using MySQL workbench GUI without any coding. You can find MySQL Workbench file and SQL code for ContactManagerApplication Schema @ https://github.com/gowrishankarnath/MySQL_Workbench","tags":"Articles","url":"/designing-database-schema-using-mysql-workbench.html","loc":"/designing-database-schema-using-mysql-workbench.html"},{"title":"Generate Fake Data Programmatically Using Faker With Python","text":"Introduction Recently, I had a requirement to fill the database with some data. Filling the tables manually proved to be very tedious enough. So, I was looking for some software that could do the heavy lifting for me and also that could be used with Python natively. Voila!! After a bit of search came across this awesome software. FAKER Faker can be used to generate fake data which resembles the real world values rather than some gibberish values. Using FAKER With Python The following code has been tested using Python 3.5 on a Windows 10 machine. Type the below command in the Command Prompt to install Faker module Let's start with a very simple example. Import the faker module and make use of the Factory Class. Use create() method to create an object called fake. Say, if you want to print a name then use the object fake along with name() method as shown below. from faker import Factory fake = Factory . create () print ( fake . name ()) Output Mrs. Kenley Farrell You can even localize the names according to your preferences. For e.g, if you want to display name in Hindi (India), then pass the string argument \"hi_IN\" to create() method. from faker import Factory fake = Factory . create ( \"hi_IN\" ) print ( fake . name ()) Ouput रचना बाबू If you want to display 10 random currencies from faker import Factory fake = Factory . create () for i in range ( 10 ): print ( fake . currency_code ()) Output MWK MRO KES TOP IQD MYR PGK MDL NIO MNT You can randomly generate addresses using address() method. Below code is localized for \"en_US\". from faker import Factory fake = Factory . create ( \"en_US\" ) for i in range ( 10 ): print ( fake . address ()) Output PSC 7452, Box 9044 APO AA 06906-4518 65264 Vince Points Suite 897 North Pearlene, PA 66031 63876 Daijah Pass New Rickiland, NM 82820 59116 Mueller Port South Rosanne, IN 07663 486 Jerde Forest New Keyshawnfort, GA 59913-5859 360 Orie Forge Lake Izayah, NY 83459-8476 1840 O'Connell Field Apt. 566 Port Zakaryton, HI 66433-8319 PSC 2512, Box 6095 APO AP 37389 89957 Williamson Burg Apt. 255 Shelliview, WY 06711-9241 78580 Vanessa Square Apt. 095 West Sherie, CT 67665 You can generate various information about a person using different methods as shown below. from faker import Factory fake = Factory . create ( \"en_US\" ) print ( fake . last_name_male ()) print ( fake . name_female ()) print ( fake . prefix_male ()) print ( fake . prefix ()) print ( fake . name ()) print ( fake . suffix_female ()) print ( fake . name_male ()) print ( fake . first_name ()) print ( fake . suffix_male ()) print ( fake . suffix ()) print ( fake . first_name_male ()) print ( fake . first_name_female ()) print ( fake . last_name_female ()) print ( fake . last_name ()) print ( fake . prefix_female ()) Output Morar Dr. Mckinley Halvorson Dr. Mrs. Kadeem Parker MD Mr. Elliott Padberg Elvira III IV Arley Mariam Turner Huel Ms. You can read various methods available in Faker Module in detail @ https://faker.readthedocs.io/en/master/# You can find the above code @ https://github.com/gowrishankarnath/FakerPythonExamples","tags":"Articles","url":"/generate-fake-data-programmatically-using-faker-with-python.html","loc":"/generate-fake-data-programmatically-using-faker-with-python.html"},{"title":"Using pytest Testing Tool to test Python Code by Configuring PyCharm IDE","text":"Introduction The aim of this article is to bring all the related information of configuring the PyCharm IDE with pytest Testing Tool in one place. Here, I'll not dwell deep into how testing is done in Python. But I'll discuss the proper way of configuring PyCharm IDE with pytest testing tool to get the things up and running. This article is tested on a Windows 10 machine running PyCharm Professional Edition 4.5 with Python 2.7.9 interpreter. Background PyCharm is a popular IDE for Python Programming. More information about PyCharm can be obtained at https://www.jetbrains.com/pycharm/ . As a rule, the code we develop should be thoroughly tested before its release. Testing is a very important topic and has been discussed in great detail in the fine material. More information about pytest testing tool can be obtained at http://pytest.org/ To gain more knowledge about testing techniques in general please refer to below books. Clean Code: A Handbook of Agile Software Craftsmanship Agile Testing: A Practical Guide for Testers and Agile Teams Software Testing: A Craftsman's Approach, Fourth Edition Pragmatic Unit Testing in Java 8 with JUnit Practical Unit Testing with JUnit and Mockito Effective Unit Testing: A guide for Java developers The Art of Unit Testing: with Examples in . NET Even though some of these books target other programming languages, still the knowledge that you gain from reading these books can be applied to Python Testing also. Steps Involved in Configuring PyCharm to work with pytest Testing Tool Here I assume that you have already configured your PyCharm IDE to run Python Interpreter. If not, you can download anaconda from https://www.continuum.io/downloads and use it to configure the Python interpreter in PyCharm IDE . Step 1: In order to follow this tutorial, create a folder called PyArticle in C: drive. Install pytest testing tool using pip command as shown below. Step 2: Invoke PyCharm IDE and go to File -> New Project. Specify the path to the folder you created and also specify the name of the project. In our case the name of the project is TestExample. Press Create button. This takes you to the PyCharm editor. Step 3: Right Click on TestExample folder on the left pane of the PyCharm editor. Select New -> Python File Step 4: Give the file name as add_two_numbers Step 5: Write the below given code in add_two_numbers.py file. This is a very simple code that adds up two numbers and returns the result. Step 6: Now go to File -> Settings Step 7: In the Settings window, click on Python Integrated Tools in the right pane and select py.test as the Default test runner. Click on OK button. Step 8: Now right click on TestExample directory and select New -> Directory. Step 9: Enter the directory name as Tests. We will have all our test files in a separate directory which is a good practice. Step 10: Right click on Tests directory and select New -> Python File. Step 11: Give the file name as test_add_two_numbers and click OK . Step 12: Write the below code in test_add_two_numbers.py file. Notice that the word test_ has been prefixed for the test method. All test methods should start with test_. This is a very important step in the configuration and if the test method doesn't start with test_ then you won't be able to get proper output. assert is used to check whether the condition is True or False. Step 13: Go to Run -> Edit Configurations. Step 14: In the Run/Debug Configurations window click on the + button found on the upper left corner. Go to Python tests and select py.test. Click OK button. Step 15: On the left pane you can see Python tests is created. In the right pane for the Name text box give the value as py.test in test_add_two_numbers.py You should always prefix the Python test file name with the words py.test in. For the Target text box specify the path to the Python test file. For the Working directory text box specify the path to the directory which has the Python test files. Click on OK button. Step 16: Right click on the Python test file and select Run. As you can see in the Test Results the green color indicates that the test has successfully passed. Step 17: What if you want to specify more than one test method? Lets find out the process to achieve the same. Create another python file called multiply_two_numbers and fill it up with the code shown below. Create another Python test file called test_queue_example. Fill it up with the code shown below. While configuring the Python test file as shown in Step 13 – 15 check the Options check box and give the value as -q . Here q stands for queue. Click on OK button after all the configurations are done. Now right click on the latest test file and run. As you can see one test got passed while the other got failed. Change the code in test_queue_example as shown below and run the test program again. You can see that both the tests have passed. Happy Coding!!! Points of Interest Testing our code is a very important aspect of software development. Using testing tools like pytest along with PyCharm IDE goes in a long way in developing quality code.","tags":"Articles","url":"/using-pytest-testing-tool-to-test-python-code-by-configuring-pycharm-ide.html","loc":"/using-pytest-testing-tool-to-test-python-code-by-configuring-pycharm-ide.html"}]};